library(shiny)
library(tidyr)
library(ggplot2)
library(dplyr)
library(purrr)
library(stringr)
library("DataExplorer")
source("word_cloud.r") 
# Define UI for data upload app ----
ui <- fluidPage(
  #shinythemes::themeSelector(),
  # App title ----
  titlePanel("Data Explorer"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      # Input: Select a file ----
      fileInput("file1", "Choose CSV File",
                multiple = FALSE,
                accept = c("text/csv",
                           "text/comma-separated-values,text/plain",
                           ".csv")),
      
      # Horizontal line ----
      tags$hr(),
      
      # Input: Checkbox if file has header ----
      checkboxInput("header", "Header", TRUE),
      #checkboxInput("Columns",colnames(file1), TRUE),
      
      # Input: Select separator ----
      radioButtons("sep", "Separator",
                   choices = c(Comma = ",",
                               Semicolon = ";",
                               Tab = "\t"),
                   selected = ","),
      
      # Input: Select quotes ----
      radioButtons("quote", "Quote",
                   choices = c(None = "",
                               "Double Quote" = '"',
                               "Single Quote" = "'"),
                   selected = '"'),
      
      # Horizontal line ----
      tags$hr(),
      
      # Input: Select number of rows to display ----
      radioButtons("disp", "Display",
                   choices = c(Head = "head",
                               All = "all"),
                   selected = "head")
      
    ),
    
    # Main panel for displaying outputs ----
    mainPanel(
      tabsetPanel(
        tabPanel("Summary", h4("Structure of Dataset"),
                 verbatimTextOutput("columns"),
                 h4("Data Description"),
                 plotOutput("data_desc"),
                 h4("Data Missing"),
                 plotOutput("data_missing"),
                 h4("Columns With Type"),
                 verbatimTextOutput("coltype"),
                 h4("Summary of Data"),
                 verbatimTextOutput("summary_data"),
                 h4("Target Distribution"),
                 h5("Select Target Columns"),
                 selectInput(inputId = "column_name", label = "Select Column", choices = NULL),
                 tableOutput("target_dist")),
        tabPanel("Data", tableOutput("contents")),
        tabPanel("Visulization", plotOutput("plot"),
                  h4("Word Cloud"),plotOutput("word_cloud")
                 )
      )
      
    )
    
  )
)

# Define server logic to read selected file ----
server <- function(input, output,session) {
  choices_column <- reactive({
    choices_column <- colnames(read(input))
  })
  observe({
    updateSelectInput(session = session, inputId = "column_name", choices = choices_column())
  })
  
  column_type <- function(data){
    textual_data <- list()
    categorical_data <-  list()
    numeric_data <- list()
    for (i in colnames(data)) {
      lengths <- 0
      if (class(data[[i]]) == "factor") {
        lengths <- str_count(data[[i]],pattern = "\\W+")
        #print(lengths)
        if (length(which(lengths >= 3)) > length(lengths)*0.75) {
          textual_data <- append(textual_data,i)
        }else{
          categorical_data <- append(categorical_data,i)
        }
      }
      else{
        numeric_data <- append(numeric_data,i)
      }
    }
    return (list(numeric_data = numeric_data,textual_data = textual_data,categorical_data = categorical_data))
  }
  read <- function(input){
  req(input$file1)
  
  # when reading semicolon separated files,
  # having a comma separator causes `read.csv` to error
  tryCatch(
    {
      df <- read.csv(input$file1$datapath,
                     header = input$header,
                     sep = input$sep,
                     quote = input$quote)
    },
    error = function(e) {
      # return a safeError if a parsing error occurs
      stop(safeError(e))
    }
  )
  
  if(input$disp == "head") {
    return(head(df))
  }
  else {
    return(df)
  }
  }
  
  output$contents <- renderTable(read(input))
  output$columns <- renderPrint({ 
    str(read(input))
  })
  output$summary_data <- renderPrint({ 
      return (read(input) %>%
                keep(is.numeric)%>%
                summary())
  })
  output$coltype <- renderPrint({ 
    unlist(column_type(read(input)))
  })
  output$target_dist <- renderTable({ 
      col <- input$column_name
      data <- read(input)
      table(data[[col]])
  })
  output$plot <- renderPlot({
    return (read(input) %>%
      keep(is.numeric) %>% 
      gather() %>% 
      ggplot(aes(value)) +
      facet_wrap(~ key, scales = "free") +
      geom_histogram())
  })
  output$word_cloud<- renderPlot({
    return (cloud(read(input)[[5]]))
  })
  output$data_desc <- renderPlot({
    return (plot_intro(read(input)))
  })
  output$data_missing <- renderPlot({
    return (plot_missing(read(input)))
  })
  
  
  
}
# Run the application 
shinyApp(ui = ui, server = server)

